// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  uid               String       @default(nanoid())
  id                String       @id @unique
  email             String       @unique
  name              String?
  firstName         String?
  lastName          String?
  image_url         String?
  profile_image_url String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime?    @updatedAt
  groups            Group[]
  friends           User[]       @relation("UserFriends")
  devices           AuthnDevice?

  // This second "side" of the UserFriends relation exists solely 
  // to satisfy prisma's requirements; we won't access it directly.
  symmetricFriends User[] @relation("UserFriends")

  expenses     Expense[]
  userSplits   UserSplit[]
  userPayments UserPayment[]
  activity     Activity[]

  @@index([id])
}

model Expense {
  id          String        @id @default(nanoid())
  amount      Float
  description String
  category    String?
  settlement  Boolean?
  type        ExpenseType
  groupId     String?
  createrId   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
  payments    UserPayment[]
  splits      UserSplit[]
  group       Group?        @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [createrId], references: [id])

  @@index([groupId])
  @@index([createrId])
}

enum ExpenseType {
  EQUAL
  EXACT
  PERCENT
}

model UserPayment {
  id        String    @id @default(nanoid())
  amount    Float
  userId    String    @map("user_id")
  expenseId String?   @map("expense_id")
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  expense   Expense?  @relation(fields: [expenseId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expenseId])
}

model UserSplit {
  id        String    @id @default(nanoid())
  amount    Float
  percent   Float?
  userId    String    @map("user_id")
  expenseId String?   @map("expense_id")
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  expense   Expense?  @relation(fields: [expenseId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expenseId])
}

model Group {
  id          String     @id @default(nanoid())
  title       String
  description String?
  image_url   String?
  type        String?
  mute        Boolean?   @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt
  users       User[]
  expenses    Expense[]
  activity    Activity[]
}

model AuthnDevice {
  id        String    @id @default(nanoid())
  data      Bytes
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Activity {
  id        String       @id @default(nanoid())
  message   String
  type      ActivityType
  createdAt DateTime     @default(now())
  updatedAt DateTime?    @updatedAt
  groupId   String
  group     Group        @relation(fields: [groupId], references: [id], onDelete: Cascade)
  users     User[]

  @@index([groupId])
}

model Log {
  id        String    @id @default(nanoid())
  type      LogType
  message   String
  utcTime   String
  body      Bytes?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

enum LogType {
  INFO
  ERROR
}

enum ActivityType {
  EXPENSE_MINUS
  EXPENSE_PLUS
  MEMBER_MINUS
  MEMBER_PLUS
  GROUP_MINUS
  GROUP_PLUS
  SYSTEM
  USER
}
